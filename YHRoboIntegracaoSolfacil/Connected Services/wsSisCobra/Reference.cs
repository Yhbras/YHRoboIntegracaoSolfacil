//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace wsSisCobra
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="siscobra", ConfigurationName="wsSisCobra.WSAssessoriaSoapPort")]
    public interface WSAssessoriaSoapPort
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="siscobraaction/AWSASSESSORIA.Execute", ReplyAction="*")]
        System.Threading.Tasks.Task<wsSisCobra.ExecuteResponse> ExecuteAsync(wsSisCobra.ExecuteRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WSAssessoria.Execute", WrapperNamespace="siscobra", IsWrapped=true)]
    public partial class ExecuteRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="siscobra", Order=0)]
        public string Token;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="siscobra", Order=1)]
        public int Carcod;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="siscobra", Order=2)]
        public string Metodo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="siscobra", Order=3)]
        public string Xmlin;
        
        public ExecuteRequest()
        {
        }
        
        public ExecuteRequest(string Token, int Carcod, string Metodo, string Xmlin)
        {
            this.Token = Token;
            this.Carcod = Carcod;
            this.Metodo = Metodo;
            this.Xmlin = Xmlin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="WSAssessoria.ExecuteResponse", WrapperNamespace="siscobra", IsWrapped=true)]
    public partial class ExecuteResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="siscobra", Order=0)]
        public string Xmlout;
        
        public ExecuteResponse()
        {
        }
        
        public ExecuteResponse(string Xmlout)
        {
            this.Xmlout = Xmlout;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface WSAssessoriaSoapPortChannel : wsSisCobra.WSAssessoriaSoapPort, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class WSAssessoriaSoapPortClient : System.ServiceModel.ClientBase<wsSisCobra.WSAssessoriaSoapPort>, wsSisCobra.WSAssessoriaSoapPort
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WSAssessoriaSoapPortClient() : 
                base(WSAssessoriaSoapPortClient.GetDefaultBinding(), WSAssessoriaSoapPortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSAssessoriaSoapPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSAssessoriaSoapPortClient(EndpointConfiguration endpointConfiguration) : 
                base(WSAssessoriaSoapPortClient.GetBindingForEndpoint(endpointConfiguration), WSAssessoriaSoapPortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSAssessoriaSoapPortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WSAssessoriaSoapPortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSAssessoriaSoapPortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WSAssessoriaSoapPortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WSAssessoriaSoapPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<wsSisCobra.ExecuteResponse> wsSisCobra.WSAssessoriaSoapPort.ExecuteAsync(wsSisCobra.ExecuteRequest request)
        {
            return base.Channel.ExecuteAsync(request);
        }
        
        public System.Threading.Tasks.Task<wsSisCobra.ExecuteResponse> ExecuteAsync(string Token, int Carcod, string Metodo, string Xmlin)
        {
            wsSisCobra.ExecuteRequest inValue = new wsSisCobra.ExecuteRequest();
            inValue.Token = Token;
            inValue.Carcod = Carcod;
            inValue.Metodo = Metodo;
            inValue.Xmlin = Xmlin;
            return ((wsSisCobra.WSAssessoriaSoapPort)(this)).ExecuteAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSAssessoriaSoapPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSAssessoriaSoapPort))
            {
                return new System.ServiceModel.EndpointAddress("http://hml-solfacil.siscobra.com.br/servlet/awsassessoria");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WSAssessoriaSoapPortClient.GetBindingForEndpoint(EndpointConfiguration.WSAssessoriaSoapPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WSAssessoriaSoapPortClient.GetEndpointAddress(EndpointConfiguration.WSAssessoriaSoapPort);
        }
        
        public enum EndpointConfiguration
        {
            
            WSAssessoriaSoapPort,
        }
    }
}
